#!/usr/bin/python

# Copyright (c) 2010 Eric Evans <eevans@sym-link.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

try:
    from lumen import Player
except ImportError, excep:
    # Hack for running in vcs checkouts
    from os.path import join, abspath, dirname, exists
    pathname = abspath(join(dirname(__file__), '..'))
    if exists(join(pathname, 'lumen', '__init__.py')):
        import sys; sys.path.append(pathname)
        from lumen import Player
    else: raise excep

from optparse import OptionParser

parser = OptionParser(usage="Usage: %prog")
parser.add_option("-P", "--play", default=None, help="Play a trackmap file.")
parser.add_option("-T", "--track", default=None, help="Music track")
parser.add_option("-F", "--fudge", type='int')
parser.add_option("-R",
                  "--record",
                  default=None,
                  help="Record keystrokes to a trackmap file.")
parser.add_option("-s",
                  "--simulated",
                  default=False,
                  action="store_true",
                  help="Play track but don't drive outputs")

(options, arguments) = parser.parse_args()

fudge = 850

if options.fudge:
    fudge = options.fudge

def bail():
    parser.print_help()
    sys.exit(1)
    
if not options.track: bail()
if options.record and options.play: bail()
if not options.record and not options.play: bail()

if (options.record):
    Player(options.track, options.record).record()
    
if (options.play):
    Player(options.track, options.play).play(fudge, options.simulated)
    
# vi:ai sw=4 ts=4 tw=0 et
